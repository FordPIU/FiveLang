class Example1 {
    var num // This doesn't need to be defined, but for the point of readability is.

    onConstruct() {
        .num = 0 // The "." is used as the "this" or "self" operator. You may also use "self" instead of ".".
    }

    incrementNum() {
        .num++
    }

    decrementNum() {
        .num--
    }
}

thread ThreadedExample({Example1}example) { // Text inside of the {} hard defines/requires a explict variable type. This is optional.
    example.incrementNum()
    printLn(example.num)
}

function Example1Master() {
    var example1 = Example1() // There is no new operator, but instead calling the class as a function automatically does this.
    Example1 example = example1 // Instead of using var you may use a class name, to hard define/require a variable type.

    ThreadedExample[Tick=1s](example) // This creates a new thread, with the paramters for the thread defined in the [], and the params to pass in the ().
            // For this example, this will increment the num variable inside of Example1 every second, and print that out.
}



function Example2() {
    Example1 example = Example1()

    while() { // Empty as a quick way to do a while true.
        example.decrementNum()
        printLin(example.num)
    }
}


function {float} HardDefinedReturn() {
    ret 1.0 // ret for Return, you may also just use return.
}

// Quickie Test
var1 {int} = 525; var2 = 5892 // hard type definition variable
var3{string} = "Hello World!"

var4, var5 = "commentexample", // this is a comment // "this is not a comment"
// end of file comment

/*
Multi line comment Test

hopefully this isnt here after compiling
*/

/*

Multi line comment #2

*/var6 = "testing"

var7 = 01;var8 = 592
var9 = 0852; var10 = 5825125


//// this is a multiple slash test
var11 = "this,is.delimiter<test>"